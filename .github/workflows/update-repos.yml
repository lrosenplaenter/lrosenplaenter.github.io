name: Update Repositories List

on:
  schedule:
    # Runs every day at midnight UTC
    - cron: '0 0 * * *'
  workflow_dispatch: # Allows manual trigger

jobs:
  update-repos:
    runs-on: ubuntu-latest
    env:
      BLACKLIST: "lrosenplaenter.github.io" # Space-separated list of repos to exclude

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Generate repositories list
        run: |
          BLACKLISTED_REPOS=($BLACKLIST)
          DATA=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" https://api.github.com/users/lrosenplaenter/repos)
          for repo in "${BLACKLISTED_REPOS[@]}"; do
            DATA=$(echo "$DATA" | jq --arg repoName "$repo" 'map(select(.name != $repoName))')
          done
          echo "$DATA" | jq '[.[] | select(.description != null) | {name: .name, html_url: .html_url, description: .description, license: .license.spdx_id, last_update: .pushed_at | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime | strftime("%d.%m.%Y %H:%M"), homepage: ("https://lrosenplaenter.github.io/" + .name)}] | sort_by(.last_update) | reverse' > repos.json
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Fetch latest tags and update repos.json
        run: |
          repos=($(jq -r '.[].name' repos.json))
          for repo in "${repos[@]}"; do
            TAG_DATA=$(curl -H "Authorization: token ${{ secrets.GH_TOKEN }}" -s "https://api.github.com/repos/lrosenplaenter/${repo}/tags" | jq -r '.[0].name // empty')
            if [ -z "$TAG_DATA" ]; then
              jq --arg repo "$repo" '(.[] | select(.name==$repo) | .latest_tag) |= null' repos.json > tmp.$$.json && mv tmp.$$.json repos.json
            else
              jq --arg repo "$repo" --arg tag "$TAG_DATA" '(.[] | select(.name==$repo) | .latest_tag) |= $tag' repos.json > tmp.$$.json && mv tmp.$$.json repos.json
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Check homepage availability
        run: |
          jq '.[] | .homepage' repos.json | while read url; do
            url=$(echo $url | tr -d '"') # Remove quotes around URL
            if [ "$url" != "null" ]; then
              STATUS_CODE=$(curl --write-out "%{http_code}\n" --silent --output /dev/null $url)
              if [ "$STATUS_CODE" == "404" ]; then
                # Set homepage to null for this URL
                jq --arg url "$url" '(.[] | select(.homepage==$url) | .homepage) |= null' repos.json > tmp.$$.json && mv tmp.$$.json repos.json
              fi
            fi
          done

      - name: Commit and push
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          # Determine if triggered by schedule or manual dispatch
          if [ "${{ github.event_name }}" = "schedule" ]; then
            COMMIT_MSG="Automated update of repository list: $(date +"%d.%m.%Y %H:%M")"
          else
            COMMIT_MSG="Manual update of repository list: $(date +"%d.%m.%Y %H:%M")"
          fi
          
          git add repos.json

          # Check if there are any changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "${COMMIT_MSG}"
            git push
          fi